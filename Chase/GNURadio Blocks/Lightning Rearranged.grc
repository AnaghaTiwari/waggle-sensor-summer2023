options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: LightningSeperator
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: LightningSeperator
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2400000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12.0]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: Open
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 1348.0]
    rotation: 0
    state: disabled
- name: analog_pwr_squelch_xx_0
  id: analog_pwr_squelch_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1e-4
    comment: ''
    gate: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    ramp: '0'
    threshold: '-60'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 268.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '.01'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: byte
    waveform: analog.GR_SQR_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 1100.0]
    rotation: 0
    state: disabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '.01'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '3'
    samp_rate: samp_rate
    type: byte
    waveform: analog.GR_SQR_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 1228.0]
    rotation: 0
    state: disabled
- name: analog_sig_source_x_0_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '-1'
    comment: ''
    freq: '100'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '3'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_SQR_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 420.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_1
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 432.0]
    rotation: 0
    state: enabled
- name: blocks_and_xx_0
  id: blocks_and_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 1240.0]
    rotation: 0
    state: disabled
- name: blocks_char_to_float_1
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 948.0]
    rotation: 0
    state: disabled
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 152.0]
    rotation: 180
    state: enabled
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '10000000'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 380.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 948.0]
    rotation: 0
    state: disabled
- name: blocks_delay_1
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '10000000'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 276.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_char_0
  id: blocks_float_to_char
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 444.0]
    rotation: 0
    state: true
- name: blocks_float_to_char_1
  id: blocks_float_to_char
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 964.0]
    rotation: 0
    state: disabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 264.0]
    rotation: 0
    state: enabled
- name: blocks_or_xx_0
  id: blocks_or_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 1320.0]
    rotation: 0
    state: disabled
- name: blocks_peak_detector2_fb_0
  id: blocks_peak_detector2_fb
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.001'
    comment: ''
    look_ahead: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_factor_rise: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 948.0]
    rotation: 0
    state: disabled
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    high: '.021'
    init: '0'
    low: '.021'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 428.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [212.0, 224]
    rotation: 270
    state: true
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 276.0]
    rotation: 0
    state: enabled
- name: blocks_wavfile_sink_0
  id: blocks_wavfile_sink
  parameters:
    affinity: ''
    alias: ''
    bits_per_sample: '16'
    comment: ''
    file: /media/waggle/Seagate Por/Data/Filtered/Filtered0
    nchan: '2'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 148.0]
    rotation: 180
    state: enabled
- name: blocks_wavfile_source_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: /media/waggle/Seagate Por/Data/baseband_-357143Hz_11-06-43_09-06-2023.wav
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '2'
    repeat: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 152.0]
    rotation: 180
    state: true
- name: blocks_wavfile_source_0_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: /home/waggle/Desktop/SDR/baseband_111059183Hz_14-42-57_06-06-2023.wav
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 1036.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Binary Gate',   # will show up in GRC\n            in_sig=[np.float32,np.byte],\n\
      \            out_sig=[np.float32]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n    def work(self, input_items, output_items):\n\
      \        if (np.all(input_items[1] == 1)):\n                output_items[0][:]\
      \ = input_items[0][:]\n        else:\n                output_items[0][:] = 0\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Binary Gate', 'blk', [], [('0', 'float', 1), ('1', 'byte', 1)], [('0',
      'float', 1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 384.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Binary Gate',   # will show up in GRC\n       \
      \     in_sig=[np.float32,np.byte],\n            out_sig=[np.float32]\n     \
      \   )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n\n    def work(self, input_items, output_items):\n      \
      \  if (np.all(input_items[1] == 1)):\n                output_items[0][:] = input_items[0][:]\n\
      \        else:\n                output_items[0][:] = 0\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Binary Gate', 'blk', [('example_param', '1')], [('0', 'float', 1),
      ('1', 'byte', 1)], [('0', 'float', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 1176.0]
    rotation: 0
    state: disabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Binary Gate',   # will show up in GRC\n            in_sig=[np.float32,np.byte],\n\
      \            out_sig=[np.float32]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n    def work(self, input_items, output_items):\n\
      \        if (np.all(input_items[1] == 1)):\n                output_items[0][:]\
      \ = input_items[0][:]\n        else:\n                output_items[0][:] = 0\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Binary Gate', 'blk', [], [('0', 'float', 1), ('1', 'byte', 1)], [('0',
      'float', 1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 952.0]
    rotation: 0
    state: disabled
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Binary Gate',   # will show up in GRC\n            in_sig=[np.complex64,np.byte],\n\
      \            out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n    def work(self, input_items, output_items):\n\
      \        if (np.all(input_items[1] == 1)):\n                output_items[0][:]\
      \ = input_items[0][:]\n        else:\n                output_items[0][:] = 0\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Binary Gate', 'blk', [], [('0', 'complex', 1), ('1', 'byte', 1)],
      [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply const',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 280.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach example_param this file\
      \ is saved, GRC will instantiate the first class it finds\nto get ports and\
      \ parameters of your block. The arguments to __init__  will\nbe the parameters.\
      \ All of them are required to have default values!\n\"\"\"\n\nimport numpy as\
      \ np\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, stall=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Stall Gate',   # will show up in GRC\n        \
      \    in_sig=[np.byte],\n            out_sig=[np.byte]\n        )\n        #\
      \ if an attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n        self.stall = stall\n      \
      \  self.toggle = 0\n        self.clock = 0\n\n\n\n    def work(self, input_items,\
      \ output_items):\n        if (self.toggle == 0):\n                if (np.any(input_items[0]\
      \ == 1)):\n                        self.toggle = 1\n                       \
      \ output_items[0][:] = 1\n                else:\n                        output_items[0][:]\
      \ = 0\n        if (self.toggle == 1):\n                output_items[0][:] =\
      \ 1\n                self.clock = self.clock+1\n                print (self.clock)\n\
      \                if (self.clock >= self.stall):\n                        self.toggle\
      \ = 0\n                        self.clock = 0\n                        output_items[0][:]\
      \ = 0\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    stall: '2500'
  states:
    _io_cache: ('Stall Gate', 'blk', [('stall', '1.0')], [('0', 'byte', 1)], [('0',
      'byte', 1)], 'Embedded Python Block example - a simple multiply const', ['stall'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 444.0]
    rotation: 0
    state: true
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach example_param this file\
      \ is saved, GRC will instantiate the first class it finds\nto get ports and\
      \ parameters of your block. The arguments to __init__  will\nbe the parameters.\
      \ All of them are required to have default values!\n\"\"\"\n\nimport numpy as\
      \ np\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, stall=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Stall Gate',   # will show up in GRC\n        \
      \    in_sig=[np.float32],\n            out_sig=[np.float32]\n        )\n   \
      \     # if an attribute with the same name as a parameter is found,\n      \
      \  # a callback is registered (properties work, too).\n        self.stall =\
      \ stall\n        self.toggle = 0\n        self.clock = 0\n\n\n\n    def work(self,\
      \ input_items, output_items):\n        if (self.toggle == 0):\n            \
      \    if (np.any(input_items[0] == 1)):\n                        self.toggle\
      \ = 1\n                        output_items[0][:] = 1\n                else:\n\
      \                        output_items[0][:] = 0\n        if (self.toggle ==\
      \ 1):\n                output_items[0][:] = 1\n                self.clock =\
      \ self.clock+1\n                if (self.clock >= self.stall):\n           \
      \             self.toggle = 0\n                        self.clock = 0\n    \
      \                    output_items[0][:] = 0\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    stall: '500'
  states:
    _io_cache: ('Stall Gate', 'blk', [('stall', '1.0')], [('0', 'float', 1)], [('0',
      'float', 1)], 'Embedded Python Block example - a simple multiply const', ['stall'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 444.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Raw
    label10: Signal 10
    label2: Filtered Data
    label3: Peaks
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '2'
    size: '2000'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '.02'
    ymin: -.02
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 348.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ZAP
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Lightning"'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: KABOOM
    ymax: '1'
    ymin: '-1'
    yunit: '"dB"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 1164.0]
    rotation: 0
    state: disabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.10'
    wintype: firdes.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 168.0]
    rotation: 0
    state: true
- name: qtgui_waterfall_sink_x_0_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.10'
    wintype: firdes.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 136.0]
    rotation: 0
    state: true

connections:
- [analog_const_source_x_0, '0', blocks_or_xx_0, '1']
- [analog_pwr_squelch_xx_0, '0', blocks_complex_to_float_0, '0']
- [analog_pwr_squelch_xx_0, '0', qtgui_waterfall_sink_x_0, '0']
- [analog_sig_source_x_0, '0', blocks_and_xx_0, '0']
- [analog_sig_source_x_0_0, '0', blocks_and_xx_0, '1']
- [analog_sig_source_x_0_0_0_0, '0', blocks_add_xx_1, '1']
- [blocks_add_xx_1, '0', blocks_threshold_ff_0, '0']
- [blocks_and_xx_0, '0', blocks_or_xx_0, '0']
- [blocks_char_to_float_1, '0', epy_block_0_1, '0']
- [blocks_complex_to_float_0, '0', blocks_wavfile_sink_0, '0']
- [blocks_complex_to_float_0, '1', blocks_wavfile_sink_0, '1']
- [blocks_delay_0, '0', epy_block_0, '0']
- [blocks_delay_0_0, '0', blocks_char_to_float_1, '0']
- [blocks_delay_1, '0', epy_block_0_2, '0']
- [blocks_float_to_char_0, '0', epy_block_1, '0']
- [blocks_float_to_complex_0, '0', blocks_throttle_0_0, '0']
- [blocks_float_to_complex_0, '0', qtgui_waterfall_sink_x_0_0, '0']
- [blocks_or_xx_0, '0', epy_block_0_0, '1']
- [blocks_peak_detector2_fb_0, '0', blocks_delay_0_0, '0']
- [blocks_threshold_ff_0, '0', epy_block_1_0, '0']
- [blocks_throttle_0, '0', blocks_add_xx_1, '0']
- [blocks_throttle_0, '0', blocks_delay_0, '0']
- [blocks_throttle_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_throttle_0_0, '0', blocks_delay_1, '0']
- [blocks_wavfile_source_0, '0', blocks_float_to_complex_0, '0']
- [blocks_wavfile_source_0, '0', blocks_throttle_0, '0']
- [blocks_wavfile_source_0, '1', blocks_float_to_complex_0, '1']
- [blocks_wavfile_source_0_0, '0', epy_block_0_0, '0']
- [epy_block_0, '0', qtgui_time_sink_x_0, '1']
- [epy_block_0_0, '0', qtgui_time_sink_x_1, '0']
- [epy_block_0_1, '0', blocks_float_to_char_1, '0']
- [epy_block_0_2, '0', analog_pwr_squelch_xx_0, '0']
- [epy_block_1, '0', epy_block_0, '1']
- [epy_block_1, '0', epy_block_0_2, '1']
- [epy_block_1_0, '0', blocks_float_to_char_0, '0']

metadata:
  file_format: 1
